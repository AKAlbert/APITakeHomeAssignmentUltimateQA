# =============================================================================
# Docker Compose Configuration for API Testing Framework
# =============================================================================
# This file defines multi-environment setup for the API testing framework
# with proper networking, volumes, and service dependencies.
# =============================================================================

version: '3.8'

# =============================================================================
# Services Configuration
# =============================================================================
services:
  
  # =============================================================================
  # API Testing Framework - Development
  # =============================================================================
  api-tests-dev:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: development
      args:
        BUILD_VERSION: ${BUILD_VERSION:-dev}
        BUILD_DATE: ${BUILD_DATE}
        VCS_REF: ${VCS_REF}
    container_name: api-tests-dev
    environment:
      - NODE_ENV=development
      - API_BASE_URL=${DEV_API_BASE_URL:-https://reqres.in}
      - API_KEY=${DEV_API_KEY}
      - LOG_LEVEL=debug
      - TEST_WORKERS=1
      - TEST_TIMEOUT=30000
      - TEST_RETRIES=1
    volumes:
      - ../src:/app/src:ro
      - ../test-data:/app/test-data:ro
      - ../logs:/app/logs
      - ../test-results:/app/test-results
      - ../playwright-report:/app/playwright-report
    networks:
      - api-test-network
    profiles:
      - development
    command: npm run test:functional
    
  # =============================================================================
  # API Testing Framework - Staging
  # =============================================================================
  api-tests-staging:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: production
      args:
        BUILD_VERSION: ${BUILD_VERSION:-staging}
        BUILD_DATE: ${BUILD_DATE}
        VCS_REF: ${VCS_REF}
    container_name: api-tests-staging
    environment:
      - NODE_ENV=staging
      - API_BASE_URL=${STAGING_API_BASE_URL:-https://staging-api.example.com}
      - API_KEY=${STAGING_API_KEY}
      - LOG_LEVEL=info
      - TEST_WORKERS=2
      - TEST_TIMEOUT=20000
      - TEST_RETRIES=2
    volumes:
      - ../logs:/app/logs
      - ../test-results:/app/test-results
      - ../playwright-report:/app/playwright-report
    networks:
      - api-test-network
    profiles:
      - staging
    command: npm run test:all
    
  # =============================================================================
  # API Testing Framework - Production
  # =============================================================================
  api-tests-prod:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: production
      args:
        BUILD_VERSION: ${BUILD_VERSION:-prod}
        BUILD_DATE: ${BUILD_DATE}
        VCS_REF: ${VCS_REF}
    container_name: api-tests-prod
    environment:
      - NODE_ENV=production
      - API_BASE_URL=${PROD_API_BASE_URL:-https://api.example.com}
      - API_KEY=${PROD_API_KEY}
      - LOG_LEVEL=warn
      - TEST_WORKERS=3
      - TEST_TIMEOUT=15000
      - TEST_RETRIES=3
    volumes:
      - ../logs:/app/logs
      - ../test-results:/app/test-results
      - ../playwright-report:/app/playwright-report
    networks:
      - api-test-network
    profiles:
      - production
    command: npm run test:functional -- --grep="@critical|@smoke"
    
  # =============================================================================
  # CI/CD Testing Service
  # =============================================================================
  api-tests-ci:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: ci
      args:
        BUILD_VERSION: ${BUILD_VERSION:-ci}
        BUILD_DATE: ${BUILD_DATE}
        VCS_REF: ${VCS_REF}
    container_name: api-tests-ci
    environment:
      - NODE_ENV=test
      - CI=true
      - API_BASE_URL=${CI_API_BASE_URL:-https://reqres.in}
      - API_KEY=${CI_API_KEY}
      - LOG_LEVEL=info
      - TEST_WORKERS=3
      - TEST_TIMEOUT=30000
      - TEST_RETRIES=2
    volumes:
      - ../logs:/app/logs
      - ../test-results:/app/test-results
      - ../playwright-report:/app/playwright-report
    networks:
      - api-test-network
    profiles:
      - ci
    command: npm run test:all
    
  # =============================================================================
  # Test Report Server
  # =============================================================================
  report-server:
    image: nginx:alpine
    container_name: test-report-server
    ports:
      - "8080:80"
    volumes:
      - ../playwright-report:/usr/share/nginx/html/reports:ro
      - ../test-results:/usr/share/nginx/html/results:ro
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - api-test-network
    profiles:
      - development
      - staging
    depends_on:
      - api-tests-dev
    
  # =============================================================================
  # Log Aggregation Service (Optional)
  # =============================================================================
  log-aggregator:
    image: fluent/fluent-bit:latest
    container_name: log-aggregator
    volumes:
      - ../logs:/var/log/app:ro
      - ./fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf:ro
    networks:
      - api-test-network
    profiles:
      - monitoring
    environment:
      - FLB_LOG_LEVEL=info
    
  # =============================================================================
  # Monitoring Service (Optional)
  # =============================================================================
  monitoring:
    image: prom/prometheus:latest
    container_name: monitoring
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - api-test-network
    profiles:
      - monitoring
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

# =============================================================================
# Networks Configuration
# =============================================================================
networks:
  api-test-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# =============================================================================
# Volumes Configuration
# =============================================================================
volumes:
  prometheus-data:
    driver: local
  test-data:
    driver: local
  test-results:
    driver: local
  logs:
    driver: local

# =============================================================================
# Extension Fields (for reusability)
# =============================================================================
x-common-variables: &common-variables
  TEST_DATA_SOURCE: file
  LOG_FORMAT: json
  FEATURE_PARALLEL_TESTS: true
  FEATURE_RETRY_MECHANISM: true

x-common-volumes: &common-volumes
  - ../logs:/app/logs
  - ../test-results:/app/test-results
  - ../playwright-report:/app/playwright-report

x-common-networks: &common-networks
  - api-test-network
